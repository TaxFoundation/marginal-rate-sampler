"""
Script to generate summary tax rate data. Saves as CSV file a set of data.
Each row shows, for a given level of income, the minimum, first quartile, median, third quartile, and maximum.
Each row is generated only if there is a change in one of the summary stats from the previous income level.
"""

import csv

data = {
    'AL': [[0, 0.02], [500, 0.04], [3000, 0.05]],
    'AK': [[0, 0]],
    'AZ': [[0, 0.0259], [10000, 0.0288], [25000, 0.0336], [50000, 0.0424], [150000, 0.0454]],
    'AR': [[0, 0.009], [4299, 0.024], [8399, 0.034], [12599, 0.044], [20999, 0.059], [35099, 0.069]],
    'CA': [[0, 0.01], [7749, 0.02], [18371, 0.04], [28995, 0.06], [40250, 0.08], [50689, 0.093], [259844, 0.103], [311812, 0.113], [519867, 0.123], [1000000, 0.133]],
    'CO': [[0, 0.046]],
    'CT': [[0, 0.03], [10000, 0.05], [50000, 0.055], [100000, 0.06], [200000, 0.065], [250000, 0.067]],
    'DE': [[2000, 0.022], [5000, 0.039], [10000, 0.048], [20000, 0.052], [25000, 0.0555], [60000, 0.066]],
    'DC': [[0, 0.04], [10000, 0.06], [40000, 0.07], [60000, 0.085], [350000, 0.0895]],
    'FL': [[0, 0]],
    'GA': [[0, 0.01], [750, 0.02], [2250, 0.03], [3750, 0.04], [5250, 0.05], [7000, 0.06]],
    'HI': [[0, 0.014], [2400, 0.032], [4800, 0.055], [9600, 0.064], [14400, 0.068], [19200, 0.072], [24000, 0.076], [36000, 0.079], [48000, 0.0825], [150000, 0.09], [175000, 0.1], [200000, 0.11]],
    'ID': [[0, 0.016], [1428, 0.036], [2857, 0.041], [4286, 0.051], [5715, 0.061], [7144, 0.071], [10717, 0.074]],
    'IL': [[0, 0.0375]],
    'IN': [[0, 0.033]],
    'IA': [[0, 0.0036], [1539, 0.0072], [3078, 0.0243], [6156, 0.045], [13851, 0.0612], [23085, 0.0648], [30780, 0.068], [46170, 0.0792], [69255, 0.0898]],
    'KS': [[0, 0.027], [15000, 0.046]],
    'KY': [[0, 0.02], [3000, 0.03], [4000, 0.04], [5000, 0.05], [8000, 0.058], [75000, 0.06]],
    'LA': [[0, 0.02], [12500, 0.04], [50000, 0.06]],
    'ME': [[5199, 0.065], [20899, 0.0795]],
    'MA': [[0, 0.02], [1000, 0.03], [2000, 0.04], [3000, 0.0475], [100000, 0.05], [125000, 0.0525], [150000, 0.055], [250000, 0.0575]],
    'MD': [[0, 0.0515]],
    'MI': [[0, 0.0425]],
    'MN': [[0, 0.0535], [25070, 0.0705], [82360, 0.0785], [154950, 0.0985]],
    'MS': [[0, 0.03], [5000, 0.04], [10000, 0.05]],
    'MO': [[0, 0.015], [1000, 0.02], [2000, 0.025], [3000, 0.03], [4000, 0.035], [5000, 0.04], [6000, 0.045], [7000, 0.05], [8000, 0.055], [9000, 0.06]],
    'MT': [[0, 0.01], [2800, 0.02], [5000, 0.03], [7600, 0.04], [10300, 0.05], [13300, 0.06], [17000, 0.069]],
    'NC': [[0, 0.0246], [3000, 0.0351], [18000, 0.0501], [29000, 0.0684]],
    'ND': [[0, 0]],
    'NH': [[0, 0.05]],
    'NJ': [[0, 0.014], [20000, 0.0175], [35000, 0.035], [40000, 0.05525], [75000, 0.0637], [500000, 0.0897]],
    'NM': [[0, 0.017], [5500, 0.032], [11000, 0.047], [16000, 0.049]],
    'NY': [[0, 0.04], [8400, 0.045], [11600, 0.0525], [13750, 0.059], [21150, 0.0645], [79600, 0.0665], [212500, 0.0685], [1115850, 0.0882]],
    'NE': [[0, 0.0575]],
    'NV': [[0, 0.0122], [36900, 0.0227], [89350, 0.0252], [186350, 0.0293], [405100, 0.0322]],
    'OH': [[0, 0.00528], [5200, 0.01057], [10400, 0.02113], [15650, 0.02642], [20900, 0.03169], [41700, 0.03698], [83350, 0.04226], [104250, 0.02906], [208500, 0.05333]],
    'OK': [[0, 0.005], [1000, 0.01], [2500, 0.02], [3750, 0.03], [4900, 0.04], [7200, 0.05], [8700, 0.0525]],
    'OR': [[0, 0.05], [3350, 0.07], [8400, 0.09], [125000, 0.099]],
    'PA': [[0, 0.0307]],
    'RI': [[0, 0.0375], [60550, 0.0475], [137650, 0.0599]],
    'SC': [[2880, 0.03], [5760, 0.04], [8640, 0.05], [11520, 0.06], [14400, 0.07]],
    'SD': [[0, 0]],
    'TN': [[0, 0.06]],
    'TX': [[0, 0]],
    'UT': [[0, 0.05]],
    'VA': [[0, 0.0355], [36900, 0.068], [89350, 0.078], [186350, 0.088], [405100, 0.0895]],
    'VT': [[0, 0.02], [3000, 0.03], [5000, 0.05], [17000, 0.0575]],
    'WV': [[0, 0]],
    'WA': [[0, 0.03], [10000, 0.04], [25000, 0.045], [40000, 0.06], [60000, 0.065]],
    'WI': [[0, 0.04], [10910, 0.0584], [21820, 0.0627], [240190, 0.0765]],
    'WY': [[0, 0]]
}

def find_rate_for_state(income, brackets):
    """
    Goes backward through income levels and rates,
    checking if the supplied income is greater than or equal to a given bracket.
    Returns the highest rate that matches the supplied income level.
    """
    rate = 0
    for bracket in reversed(brackets):
        if income >= bracket[0]:
            rate = bracket[1]
            break
    return rate


def summarize_stats(income, rates):
    rates.sort()

    low = min(rates)
    first_quartile = rates[12]
    median = rates[25]
    third_quartile = rates[37]
    high = max(rates)

    return [income, low, first_quartile, median, third_quartile, high]

def sample_brackets(data, max_income=1200000):
    count = 1
    summary_stats = []
    previous_stats = []

    for income in range(0, max_income+1):
        rates = []
        for state in data:
            rate = find_rate_for_state(income, data[state])
            rates.append(rate)
    
        new_stats = summarize_stats(income, rates)
    
        if previous_stats == []:
            summary_stats.append(new_stats)
            previous_stats = new_stats
        elif (previous_stats[1] != new_stats[1] or
            previous_stats[2] != new_stats[2] or
            previous_stats[3] != new_stats[3] or
            previous_stats[4] != new_stats[4] or
            previous_stats[5] != new_stats[5]):
            summary_stats.append(new_stats)
            previous_stats = new_stats
            count += 1

    print(count, "Samples Returned")
    return summary_stats

csv_samples = open('rates_samples.csv', 'wt', encoding='utf-8', newline='\n')
write_samples = csv.writer(csv_samples)
write_samples.writerows(sample_brackets(data, 1200000))
write_samples.close()